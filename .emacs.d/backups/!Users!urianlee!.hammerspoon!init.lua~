local mash = {"cmd", "alt", "ctrl"}
local mashshift = {"shift", "cmd", "alt", "ctrl"}

-- --------- HELLO WORLD ----------- --

hs.hotkey.bind(mash, "W", function()
  hs.notify.new({title="Hammerspoon", informativeText="Hello World"}):send()
end)

-- ---------- WINDOW MOVEMENT ------------ --

hs.hotkey.bind(mash, "Y", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()

  f.x = f.x - 100
  f.y = f.y - 100
  win:setFrame(f)
end)

hs.hotkey.bind(mash, "K", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()

  f.y = f.y - 50
  win:setFrame(f)
end)

hs.hotkey.bind(mash, "U", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()

  f.x = f.x + 100
  f.y = f.y - 100
  win:setFrame(f)
end)

hs.hotkey.bind(mash, "H", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()

  f.x = f.x - 100
  win:setFrame(f)
end)

hs.hotkey.bind(mash, "L", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()

  f.x = f.x + 100
  win:setFrame(f)
end)

hs.hotkey.bind(mash, "B", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()

  f.x = f.x - 100
  f.y = f.y + 100
  win:setFrame(f)
end)

hs.hotkey.bind(mash, "J", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()

  f.y = f.y + 50
  win:setFrame(f)
end)

-- -------------WINDOW PARTITIONING----------- --

hs.hotkey.bind(mash, "Left", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()
  local screen = win:screen()
  local max = screen:frame()

  f.x = max.x
  f.y = max.y
  f.w = max.w / 2
  f.h = max.h
  win:setFrame(f)
end)

hs.hotkey.bind(mash, "Right", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()
  local screen = win:screen()
  local max = screen:frame()

  f.x = max.x + (max.w / 2)
  f.y = max.y
  f.w = max.w / 2
  f.h = max.h
  win:setFrame(f)
end)

hs.hotkey.bind(mash, "Up", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()
  local screen = win:screen()
  local max = screen:frame()
  f.x = max.x
  f.y = max.y
  f.w = max.w
  f.h = max.h / 2
  win:setFrame(f)
end)

hs.hotkey.bind(mash, "Down", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()
  local screen = win:screen()
  local max = screen:frame()
  f.x = max.x
  f.y = max.y + (max.h / 2)
  f.w = max.w
  f.h = max.h / 2
  win:setFrame(f)
end)

-- ------------CENTER SCREEN------------ --
hs.hotkey.bind(mash, "n", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()
  local screen = win:screen()
  local max = screen:frame()
  f.x = max.w / 2 - f.w / 2
  f.y = max.h / 2 - f.h / 2
  win:setFrame(f)
end)
-- ----------WINDOW RESIZING------------ --
hs.hotkey.bind(mashshift, "h", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()
  f.w = f.w - 100
  win:setFrame(f)
end)

hs.hotkey.bind(mashshift, "l", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()
  f.w = f.w + 100
  win:setFrame(f)
end)

hs.hotkey.bind(mashshift, "k", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()
  f.h = f.h - 100
  win:setFrame(f)
end)

hs.hotkey.bind(mashshift, "j", function()
  local win = hs.window.focusedWindow()
  local f = win:frame()
  f.h = f.h + 100
  win:setFrame(f)
end)

-- -----------WINDOW LAYOUT-----------  --

local laptopScreen = "Color LCD"
local windowLayout = {
    {"Safari", nil, laptopScreen, hs.layout.left40, nil, nil},
    {"Mail", nil, laptopScreen, hs.layout.right40, nil, nil},
    {"iTunes", "iTunes", laptopScreen, hs.layout.maximized, nil, nil},
    }
    hs.layout.apply(windowLayout)

-- ---------RELOAD CONFIGURATION UPON SAVE--------- -- 

function reloadConfig(files)
    doReload = false
    for _,file in pairs(files) do
        if file:sub(-4) == ".lua" then
	    doReload = true
	end
    end
    if doReload then
        hs.reload()
    end
end
hs.pathwatcher.new(os.getenv("HOME") .. "/.hammerspoon/", reloadConfig):start()
hs.alert.show("Configuration Reloaded")

function cycle_safari_agents()
    hs.application.launchOrFocus("Safari")
    local safari = hs.appfinder.appFromName("Safari")

    local str_default = {"Develop", "User Agent", "Default (Automatically Chosen)"}
    local str_ie10 = {"Develop", "User Agent", "Internet Explorer 10.0"}
    local str_chrome = {"Develop", "User Agent", "Google Chrome - Windows"}

    local default = safari:findMenuItem(str_default)
    local ie10 = safari:findMenuItem(str_ie10)
    local chrome = safari:findMenuItem(str_chrome)

    if (default and default["ticked"]) then
        safari:selectMenuItem(str_ie10)
	hs.alert.show("IE10")
    end
    if (ie10 and ie10["ticked"]) then
        safari:selectMenuItem(str_chrome)
	hs.alert.show("Chrome")
    end
    if (chrome and chrome["ticked"]) then
        safari:selectMenuItem(str_default)
	hs.alert.show("Safari")
    end
end
hs.hotkey.bind(mash, '7', cycle_safari_agents)

-- --------------CAFFEINE EXTENSION---------------- --

local caffeine = hs.menubar.new()
function setCaffeineDisplay(state)
    if state then
        caffeine:setTitle("INSOMNIA")
    else
        caffeine:setTitle("SLEEPY")
    end
end

function caffeineClicked()
    setCaffeineDisplay(hs.caffeinate.toggle("displayIdle"))
end

if caffeine then
    caffeine:setClickCallback(caffeineClicked)
    setCaffeineDisplay(hs.caffeinate.get("displayIdle"))
end

function applicationWatcher(appName, eventType, appObject)
    if (eventType == hs.application.watcher.activated) then
        if (appName == "Finder") then
	    -- Bring all Finder windows forward when one gets activated
	    appObject:selectMenuItem({"Window", "Bring All to Front"})
	end
    end
end
local appWatcher = hs.application.watcher.new(applicationWatcher)
appWatcher:start()

-- ----------------------Wi-Fi WATCHER----------------------- --

local wifiWatcher = nil
-- local homeSSID = "ATT3u3q5Y8"
local homeSSID = "MaruchanPapi"

-- Later add in College Wi-Fi --
local lastSSID = hs.wifi.currentNetwork()

function ssidChangedCallback()
    newSSID = hs.wifi.currentNetwork()

    if newSSID == homeSSID and lastSSID ~= homeSSID then
        -- We just joined our home Wi-Fi network
	hs.notify.new({title="Welcome Home!", informativeText="Volume set to 25"}):send()
	hs.audiodevice.defaultOutputDevice():setVolume(25)
    elseif newSSID ~= homeSSID and lastSSID == homeSSID then
        -- We just departed our home Wi-Fi network
	hs.notify.new({title="Away From Home", informativeText="Volume set to 0"}):send()
	hs.audiodevice.defaultOutputDevices():setVolume(0)
    end

    lastSSID = newSSID

end

wifiWatcher = hs.wifi.watcher.new(ssidChangedCallback)
wifiWatcher:start()

-- --------------- PASTE BLOCKING ---------------- --

hs.hotkey.bind({"cmd", "alt"}, "V", function() hs.eventtap.keyStrokes(hs.pasteboard.getContents()) end)

-- --------------- HIDE HAMMERSPOON --------------- --

hs.dockicon.hide()

-- --------------- INVERT COLORS ------------------ --

hs.hotkey.bind(mash, "I", 'Invert', hs.redshift.toggleInvert)

